<?xml version="1.0"?>

<!--
  Copyright (C) Igor Sysoev
  Copyright (C) Nginx, Inc.
  -->

<!DOCTYPE module SYSTEM "../../../dtd/module.dtd">

<module name="核心机能"
        link="/cn/docs/ngx_core_module.html"
        lang="cn"
        translator="cfsego"
        rev="6">

<section id="example" name="示例配置">

<para>
<example>
user www www;
worker_processes 2;

error_log /var/log/nginx-error.log info;

events {
    use kqueue;
    worker_connections 2048;
}

...
</example>
</para>

</section>


<section id="directives" name="指令">

<directive name="accept_mutex">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>events</context>

<para>
如果使用，nginx的多个工作进程将以串行方式接入新连接。否则，新连接将通报给所有工作进程，而且如果新连接数量较少，某些工作进程可能只是在浪费系统资源。
<note>
必须开启<literal>accept_mutex</literal>才能使用<link doc="events.xml" id="rtsig"/>连接处理方式。
</note>
</para>

</directive>


<directive name="accept_mutex_delay">
<syntax><value>time</value></syntax>
<default>500ms</default>
<context>events</context>

<para>
使用<link id="accept_mutex"/>时，可以指定某个工作进程检测到其它工作进程正在接入新连接时，自身等待直到重新开始尝试接入新连接的最大时间间隔。
</para>

</directive>


<directive name="daemon">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>main</context>

<para>
决定nginx是否应以守护进程的方式工作。主要用于开发。
</para>

</directive>


<directive name="debug_connection">
<syntax>
    <value>address</value> |
    <value>CIDR</value> |
    <literal>unix:</literal></syntax>
<default/>
<context>events</context>

<para>
开启针对特定客户端连接的调试日志。除开这些连接，其它连接将使用<link id="error_log"/>指令设置的日志级别。
被调试的连接可以使用IPv4或IPv6(1.3.0, 1.2.1)网络地址来指定，
也可以使用主机名来设置连接。
对于UNIX域套接字(1.3.0, 1.2.1)，使用“<literal>unix:</literal>”参数来启用调试日志。
<example>
events {
    debug_connection 127.0.0.1;
    debug_connection localhost;
    debug_connection 192.0.2.0/24;
    debug_connection ::1;
    debug_connection 2001:0db8::/32;
    debug_connection unix:;
    ...
}
</example>
<note>
只有在编译时设置<literal>--with-debug</literal>，上述指令才可以工作。
</note>
</para>

</directive>


<directive name="debug_points">
<syntax><literal>abort</literal> | <literal>stop</literal></syntax>
<default/>
<context>main</context>

<para>
这条指令用于调试。
</para>

<para>
当nginx检测到内部错误，比如重启工作进程时出现套接字泄漏，开启<literal>debug_points</literal>将导致创建core文件(<literal>abort</literal>)，
或者停止进程(<literal>stop</literal>)以便使用系统调试器进行进一步分析。
</para>

</directive>


<directive name="error_log">
<syntax>
<value>file</value> | <literal>stderr</literal>
[<literal>debug</literal> |
<literal>info</literal> |
<literal>notice</literal> |
<literal>warn</literal> |
<literal>error</literal> |
<literal>crit</literal> |
<literal>alert</literal> |
<literal>emerg</literal>]</syntax>
<default>logs/error.log error</default>
<context>main</context>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
配置日志。
</para>

<para>
第一个参数定义了存放日志的文件。
<!--
If filename is not absolute, it is prefixed with the prefix path.
-->
如果设置为特殊值<literal>stderr</literal>，nginx会将日志输出到标准错误输出。
</para>

<para>
第二个参数定义日志级别。
日志级别在上面已经按严重性由轻到重的顺序列出。
设置为某个日志级别将会使指定级别和更高级别的日志都被记录下来。
比如，默认级别<literal>error</literal>会使nginx记录所有<literal>error</literal>、<literal>crit</literal>、<literal>alert</literal>和<literal>emerg</literal>级别的消息。
如果省略这个参数，nginx会使用<literal>error</literal>。
<note>
为了使<literal>debug</literal>日志工作，需要添加<literal>--with-debug</literal>编译选项。
</note>
</para>

</directive>


<directive name="env">
<syntax><value>variable</value>[=<value>value</value>]</syntax>
<default>TZ</default>
<context>main</context>

<para>
nginx默认会删除从父进程继承的除TZ变量以外的所有环境变量。
这条指令允许nginx保留某些继承的环境变量，改变它们的值，或者创建新的环境变量。
这些变量将：
<list type="bullet">

<listitem>
在<link doc="control.xml" id="upgrade">热升级</link>nginx执行文件时被继承；
</listitem>

<listitem>
被<link doc="http/ngx_http_perl_module.xml">ngx_http_perl_module</link>模块使用；
</listitem>

<listitem>
被工作进程使用。
请大家牢记于心，使用这种方法控制系统库不总是可行的，因为在这条指令设置环境变量以前，系统库初始化时就已检查这些环境变量的情况也并非少见。
但有一个例外，就是上面提到的<link doc="control.xml" id="upgrade">热升级</link>nginx执行文件。
</listitem>

</list>
</para>

<para>
TZ变量总是被继承，并且可被<link doc="http/ngx_http_perl_module.xml">ngx_http_perl_module</link>模块使用，
除非明确配置不允许这样。
</para>

<para>
使用示例：
<example>
env MALLOC_OPTIONS;
env PERL5LIB=/data/site/modules;
env OPENSSL_ALLOW_PROXY_CERTS=1;
</example>
</para>

<para>
<note>
NGINX环境变量是由nginx内部设置和使用，用户不应直接设置它。
</note>
</para>

</directive>


<directive name="events">
<syntax block="yes"/>
<default/>
<context>main</context>

<para>
提供配置上下文，以解析那些影响连接处理的指令。
</para>

</directive>


<directive name="include">
<syntax><value>file</value> | <value>mask</value></syntax>
<default/>
<context/>

<para>
将另一个<value>file</value>，或者匹配指定<value>mask</value>的文件，包含到配置中。
被包含的文件应由语法正确的指令和块组成。
</para>

<para>
使用示例：
<example>
include mime.types;
include vhosts/*.conf;
</example>
</para>

</directive>


<directive name="lock_file">
<syntax><value>file</value></syntax>
<default>logs/nginx.lock</default>
<context>main</context>

<para>
nginx使用锁机制来实现<link id="accept_mutex"/>，并将访问串行化到共享内存。
绝大多数系统中，锁是由原子操作实现，那么可以忽略这条指令。
另外一些系统使用“锁文件”的机制，那么这条指令将指定锁文件的前缀。
</para>

</directive>


<directive name="master_process">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>main</context>

<para>
决定是否启动工作进程。这条指令是为nginx开发者设计的。
</para>

</directive>


<directive name="multi_accept">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>events</context>

<para>
关闭时，工作进程一次只会接入一个新连接。否则，工作进程一次会将所有新连接全部接入。
<note>
使用<link doc="events.xml" id="kqueue"/>连接处理方式时，可忽略这条指令，因为kqueue可以报告有多少新连接等待接入。
</note>
<note>
使用<link doc="events.xml" id="rtsig"/>连接处理方式将自动开启<literal>multi_accept</literal>。
</note>
</para>

</directive>


<directive name="pcre_jit">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>main</context>
<appeared-in>1.1.12</appeared-in>

<para>
开启或禁止在配置解析阶段为正则表达式使用“即时编译”(PCRE JIT)技术。
</para>

<para>
PCRE JIT可以显著提升处理正则表达式的速度。
<note>
从PCRE 8.20版本开始，可用PCRE的<literal>--enable-jit</literal>编译选项打开JIT功能。
当使用PCRE源码库编译nginx时(<literal>--with-pcre=</literal>)，
应该使用nginx的<literal>--with-pcre-jit</literal>编译选项开启JIT支持。
</note>
</para>

</directive>


<directive name="pid">
<syntax><value>file</value></syntax>
<default>nginx.pid</default>
<context>main</context>

<para>
定义存储nginx主进程ID的<value>file</value>。
</para>

</directive>


<directive name="ssl_engine">
<syntax><value>device</value></syntax>
<default/>
<context>main</context>

<para>
定义SSL硬件加速器的名字。
</para>

</directive>


<directive name="timer_resolution">
<syntax><value>interval</value></syntax>
<default/>
<context>main</context>

<para>
在工作进程中降低定时器的精度，因此可以减少产生<c-func>gettimeofday</c-func>系统调用的次数。
默认情况下，每收到一个内核事件，nginx都会调用<c-func>gettimeofday</c-func>。
使用此指令后，nginx仅在每经过指定的<value>interval</value>时间间隔后调用一次<c-func>gettimeofday</c-func>。
</para>

<para>
Example:
<example>
timer_resolution 100ms;
</example>
</para>

<para>
时间间隔的内部实现取决于使用的方法：
<list type="bullet">

<listitem>
使用<literal>kqueue</literal>时，会使用<c-def>EVFILT_TIMER</c-def>过滤器；
</listitem>

<listitem>
使用<literal>eventport</literal>时，会使用<c-func>timer_create</c-func>；
</listitem>

<listitem>
否则会使用<c-func>setitimer</c-func>。
</listitem>

</list>
</para>

</directive>


<directive name="use">
<syntax><value>method</value></syntax>
<default/>
<context>events</context>

<para>
指定使用的<link doc="events.xml">连接处理</link><value>method(方式)</value>。
通常不需要明确设置，因为nginx默认会使用最高效的方法。
</para>

</directive>


<directive name="user">
<syntax><value>user</value> [<value>group</value>]</syntax>
<default>nobody nobody</default>
<context>main</context>

<para>
定义工作进程使用的<value>user</value>和<value>group</value>身份。
如果省略<value>group</value>，nginx会使用与<value>user</value>相同的组名。
</para>

</directive>


<directive name="worker_aio_requests">
<syntax><value>number</value></syntax>
<default>32</default>
<context>events</context>
<appeared-in>1.1.4</appeared-in>
<appeared-in>1.0.7</appeared-in>

<para>
在使用<link doc="../docs/events.xml" id="epoll"/>连接处理方式的情况下使用<link doc="http/ngx_http_core_module.xml" id="aio"/>时，
可以设置单个工作进程未处理的异步I/O操作的最大<value>number(数量)</value>。
</para>

</directive>


<directive name="worker_connections">
<syntax><value>number</value></syntax>
<default>512</default>
<context>events</context>

<para>
设置每个工作进程可以打开的最大并发连接数。
</para>

<para>
需要记住，这个数量包含所有连接(比如，和后端服务器建立的连接，还有其他的），
而不仅仅是和客户端的连接。
另外需要考虑的是，实际的并发连接数是不能超过打开文件的最大数量限制的，这个限制可以用<link id="worker_rlimit_nofile"/>指令修改。
</para>

</directive>


<directive name="worker_cpu_affinity">
<syntax><value>cpumask</value> ...</syntax>
<default/>
<context>main</context>

<para>
绑定工作进程到指定的CPU集合。每个CPU集合使用一个标记允许使用的CPU的位图来表示。
需要为每个工作进程分别设置CPU集合。
工作进程默认不会绑定到任何特定的CPU。
</para>

<para>
比如
<example>
worker_processes    4;
worker_cpu_affinity 0001 0010 0100 1000;
</example>
将每个工作进程分别绑定至不同的CPU，而
<example>
worker_processes    2;
worker_cpu_affinity 0101 1010;
</example>
将第一个工作进程绑定至CPU0/CPU2，将第二个工作进程绑定至CPU1/CPU3。
上面第二个例子适合于超线程的机器。
</para>

<para>
<note>
这条指令仅在FreeFSD和Linux系统有效。
</note>
</para>

</directive>


<directive name="worker_priority">
<syntax><value>number</value></syntax>
<default>0</default>
<context>main</context>

<para>
定义工作进程的调度优先级。这与<command>nice</command>命令行所做的相同：
<value>number</value>为负数代表优先级更高。通常允许的范围是[-20, 20]。
</para>

<para>
举例：
<example>
worker_priority -10;
</example>
</para>

</directive>


<directive name="worker_processes">
<syntax><value>number</value> | <literal>auto</literal></syntax>
<default>1</default>
<context>main</context>

<para>
定义工作进程的数量。
</para>

<para>
关于这个值的优化依赖很多因素，其中包括（但不限于）CPU的核数，存储数据的硬盘数量和负载模式。
如果感觉到迷惑，将它设置为等于可用的CPU核数是一个不错的开始（值为“<literal>auto</literal>”时，nginx会自动检测它）。
<note>
<literal>auto</literal>参数从版本1.3.8和1.2.5开始支持。
</note>
</para>

</directive>


<directive name="worker_rlimit_core">
<syntax><value>size</value></syntax>
<default/>
<context>main</context>

<para>
修改工作进程的core文件尺寸的最大值限制(<c-def>RLIMIT_CORE</c-def>)，用于在不重启主进程的情况下增大该限制。
</para>

</directive>


<directive name="worker_rlimit_nofile">
<syntax><value>number</value></syntax>
<default/>
<context>main</context>

<para>
修改工作进程的打开文件数的最大值限制(<c-def>RLIMIT_NOFILE</c-def>)，用于在不重启主进程的情况下增大该限制。
</para>

</directive>


<directive name="worker_rlimit_sigpending">
<syntax><value>number</value></syntax>
<default/>
<context>main</context>

<para>
在支持<link doc="events.xml" id="rtsig"/>连接处理方式的系统中，修改工作进程的信号队列长度限制(<c-def>RLIMIT_SIGPENDING</c-def>)，用于在不重启主进程的情况下增大该限制。
</para>

</directive>


<directive name="working_directory">
<syntax><value>directory</value></syntax>
<default/>
<context>main</context>

<para>
定义工作进程的当前工作路径。
主要用于设置core文件的目标地址。工作进程应当具有指定路径的写权限。
</para>

</directive>

</section>

</module>
