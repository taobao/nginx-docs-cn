<?xml version="1.0"?>

<!--
  Copyright (C) Igor Sysoev
  Copyright (C) Nginx, Inc.
  -->

<!DOCTYPE module SYSTEM "../../../../dtd/module.dtd">

<module name="ngx_http_proxy_module 模块"
        link="/cn/docs/http/ngx_http_proxy_module.html"
        lang="cn"
        translator="cfsego"
        rev="1">

<section id="summary">

<para>
<literal>ngx_http_proxy_module</literal> 模块允许传送请求到其它服务器。
</para>

</section>


<section id="example" name="配置示例">

<para>
<example>
location / {
    proxy_pass       http://localhost:8000;
    proxy_set_header Host      $host;
    proxy_set_header X-Real-IP $remote_addr;
}
</example>
</para>

</section>


<section id="directives" name="指令">

<directive name="proxy_buffer_size">
<syntax><value>size</value></syntax>
<default>4k|8k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
设置缓冲区的大小为<value>size</value>。nginx从被代理的服务器读取响应时，使用该缓冲区保存响应的开始部分。这部分通常包含着一个小小的响应头。该缓冲区大小默认等于<link id="proxy_buffers"/>指令设置的一块缓冲区的大小，但它也可以被设置得更小。
</para>

</directive>


<directive name="proxy_buffering">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
代理的时候，开启或关闭缓冲后端服务器的响应。
</para>

<para>
当开启缓冲时，nginx尽可能快地从被代理的服务器接收响应，再将它存入<link id="proxy_buffer_size"/>和<link id="proxy_buffers"/>指令设置的缓冲区中。如果响应无法整个纳入内存，那么其中一部分将存入磁盘上的<link id="proxy_temp_path">临时文件</link>。<link id="proxy_max_temp_file_size"/>和<link id="proxy_temp_file_write_size"/>指令可以控制临时文件的写入。
</para>

<para>
当关闭缓冲时，收到响应后，nginx立即将其同步传给客户端。nginx不会尝试从被代理的服务器读取整个请求，而是将<link id="proxy_buffer_size"/>指令设定的大小作为一次读取的最大长度。
</para>

<para>
响应头<header>X-Accel-Buffering</header>传递“<literal>yes</literal>”或“<literal>no</literal>”可以动态地开启或关闭代理的缓冲功能。
这个能力可以通过<link doc="ngx_http_proxy_module.xml" id="proxy_ignore_headers"/>指令关闭。
</para>

</directive>


<directive name="proxy_buffers">
<syntax><value>number</value> <value>size</value></syntax>
<default>8 4k|8k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
为每个连接设置缓冲区的数量为<value>number</value>，每块缓冲区的大小为<value>size</value>。这些缓冲区用于保存从被代理的服务器读取的响应。每块缓冲区默认等于一个内存页的大小。这个值是4K还是8K，取决于平台。
</para>

</directive>


<directive name="proxy_busy_buffers_size">
<syntax><value>size</value></syntax>
<default>8k|16k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
当开启<link id="proxy_buffering">缓冲<link>响应的功能以后，在没有读到全部响应的情况下，写缓冲到达一定<value>大小</value>时，nginx一定会向客户端发送响应，直到缓冲小于此值。这条指令用来设置此值。
同时，剩余的缓冲区可以用于接收响应，如果需要，一部分内容将缓冲到临时文件。该<value>大小</value>默认是<link id="proxy_buffer_size"/>和<link id="proxy_buffers"/>指令设置单块缓冲大小的两倍。
</para>

</directive>


<directive name="proxy_cache">
<syntax><value>zone</value> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
指定用于页面缓存的共享内存。同一块共享内存可以在多个地方使用。<literal>off</literal>参数可以屏蔽从上层配置继承的缓存功能。
</para>

</directive>


<directive name="proxy_cache_bypass">
<syntax><value>string</value> ...</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
定义nginx不从缓存取响应的条件。如果至少一个字符串条件非空而且非“0”，nginx就不会从缓存中去取响应：
<example>
proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
proxy_cache_bypass $http_pragma    $http_authorization;
</example>
本指令可和与<link id="proxy_no_cache"/>一起使用。
</para>

</directive>


<directive name="proxy_cache_key">
<syntax><value>string</value></syntax>
<default>$scheme$proxy_host$request_uri</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
定义如何生成缓存的键，比如
<example>
proxy_cache_key "$host$request_uri $cookie_user";
</example>
这条指令的默认值类似于下面字符串
<example>
proxy_cache_key $scheme$proxy_host$uri$is_args$args;
</example>
</para>

</directive>


<directive name="proxy_cache_lock">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.12</appeared-in>

<para>
开启此功能时，对于相同的请求，同时只允许一个请求发往后端，并根据<link id="proxy_cache_key"/>指令的设置在缓存中植入一个新条目。
其他请求相同条目的请求将一直等待，直到缓存中出现相应的内容，或者锁在<link id="proxy_cache_lock_timeout"/>指令设置的超时后被释放。
</para>

</directive>


<directive name="proxy_cache_lock_timeout">
<syntax><value>time</value></syntax>
<default>5s</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.12</appeared-in>

<para>
为<link id="proxy_cache_lock"/>指令设置锁的超时。
</para>

</directive>


<directive name="proxy_cache_min_uses">
<syntax><value>number</value></syntax>
<default>1</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
设置响应被缓存的最小请求<value>次数</value>。
</para>

</directive>


<directive name="proxy_cache_path">
<syntax>
    <value>path</value>
    [<literal>levels</literal>=<value>levels</value>]
    <literal>keys_zone</literal>=<value>name</value>:<value>size</value>
    [<literal>inactive</literal>=<value>time</value>]
    [<literal>max_size</literal>=<value>size</value>]
    [<literal>loader_files</literal>=<value>number</value>]
    [<literal>loader_sleep</literal>=<value>time</value>]
    [<literal>loader_threshold</literal>=<value>time</value>]</syntax>
<default/>
<context>http</context>

<para>
设置缓存的路径和其他参数。缓存数据是保存在文件中的，缓存的键和文件名都是在代理URL上执行MD5的结果。

<literal>levels</literal>参数定义了缓存的层次结构。比如，下面配置
<example>
proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=one:10m;
</example>
缓存中文件名看起来是这样的：
<example>
/data/nginx/cache/<emphasis>c</emphasis>/<emphasis>29</emphasis>/b7f54b2df7773722d382f4809d650<emphasis>29c</emphasis>
</example>
</para>

<para>
被缓存的响应首先写入一个临时文件，然后进行重命名。从0.8.9版本开始，临时文件和缓存可以放在不同的文件系统。但请注意，这将导致文件在这两个文件系统中进行拷贝，而不是廉价的重命名操作。因此，针对任何路径，都建议将缓存和<link id="proxy_temp_path"/>指令设置的临时文件目录放在同一文件系统。
</para>

<para>
此外，所有活动的键和缓存数据相关的信息都被存放在共享内存中。共享内存通过<literal>keys_zone</literal>参数的<value>name</value>和<value>size</value>来定义。被缓存的数据如果在<literal>inactive</literal>参数指定的时间内未被访问，就会被从缓存中移除，不论它是否是刚产生的。<literal>inactive</literal>的默认值是10分钟。
</para>

<para>
特殊进程“cache manager”监控缓存的条目数量，如果超过<literal>max_size</literal>参数设置的最大值，使用LRU算法移除缓存数据。
</para>

<para>
nginx新启动后不就，特殊进程“cache loader”就被启动。该进程将文件系统上保存的过去缓存的数据的相关信息重新加载到共享内存。加载过程分多次迭代完成，每次迭代，进程只加载不多于<literal>loader_files</literal>参数指定的文件数量（默认值为100）。此外，每次迭代过程的持续时间不能超过<literal>loader_threshold</literal>参数的值（默认200毫秒）。每次迭代之间，nginx的暂停时间由<literal>loader_sleep</literal>参数指定（默认50毫秒）。
</para>

</directive>


<directive name="proxy_cache_use_stale">
<syntax>
    <literal>error</literal> |
    <literal>timeout</literal> |
    <literal>invalid_header</literal> |
    <literal>updating</literal> |
    <literal>http_500</literal> |
    <literal>http_502</literal> |
    <literal>http_503</literal> |
    <literal>http_504</literal> |
    <literal>http_404</literal> |
    <literal>off</literal>
    ...</syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
如果后端服务器出现状况，nginx是可以使用过期的响应缓存的。这条指令就是定义何种条件下允许开启此机制。这条指令的参数与<link id="proxy_next_upstream"/>指令的参数相同。
</para>

<para>
此外，<literal>updating</literal>参数允许nginx在正在更新缓存的情况下使用过期的缓存作为响应。这样做可以使更新缓存数据时，访问源服务器的次数最少。
</para>

<para>
在植入新的缓存条目时，如果想使访问源服务器的次数最少，可以使用<link id="proxy_cache_lock"/>指令。
</para>

</directive>


<directive name="proxy_cache_valid">
<syntax>[<value>code</value> ...] <value>time</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
为不同的响应状态码设置不同的缓存时间。比如，下面指令
<example>
proxy_cache_valid 200 302 10m;
proxy_cache_valid 404      1m;
</example>
设置状态码为200和302的响应的缓存时间为10分钟，状态码为404的响应的缓存时间为1分钟。
</para>

<para>
如果仅仅指定了<value>time</value>，
<example>
proxy_cache_valid 5m;
</example>
那么只有状态码为200、300和302的响应会被缓存。
</para>

<para>
如果使用了<literal>any</literal>参数，那么就可以缓存任何响应：
<example>
proxy_cache_valid 200 302 10m;
proxy_cache_valid 301      1h;
proxy_cache_valid any      1m;
</example>
</para>

<para>
缓存参数也可以直接在响应头中设定。这种方式的优先级高于使用这条指令设置缓存时间。
<header>X-Accel-Expires</header>响应头可以以秒为单位设置响应的缓存时间，如果值为0，表示禁止缓存响应，如果值以<literal>@</literal>开始，表示自1970年1月1日以来的秒数，响应一直会被缓存到这个绝对时间点。
如果不含<header>X-Accel-Expires</header>响应头，缓存参数仍可能被<header>Expires</header>或者<header>Cache-Control</header>响应头设置。
如果响应头含有<header>Set-Cookie</header>，响应将不能被缓存。
这些头的处理过程可以使用指令<link id="proxy_ignore_headers"/>忽略。
</para>

</directive>


<directive name="proxy_connect_timeout">
<syntax><value>time</value></syntax>
<default>60s</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
设置与后端服务器建立连接的超时时间。应该注意这个超时一般不可能大于75秒。
</para>

</directive>


<directive name="proxy_cookie_domain">
<syntax><literal>off</literal></syntax>
<syntax><value>domain</value> <value>replacement</value></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.15</appeared-in>

<para>
设置<header>Set-Cookie</header>响应头中的<literal>domain</literal>属性的替换文本。
假设后端服务器返回的<header>Set-Cookie</header>响应头含有属性“<literal>domain=localhost</literal>”，那么指令
<example>
proxy_cookie_domain localhost example.org;
</example>
将这个属性改写为“<literal>domain=example.org</literal>”。
</para>

<para>
<value>domain</value>和<value>replacement</value>配置字符串，以及<literal>domain</literal>属性中起始的点将被忽略。
匹配过程大小写不敏感。
</para>

<para>
<value>domain</value>和<value>replacement</value>配置字符串中可以包含变量：
<example>
proxy_cookie_domain www.$host $host;
</example>
</para>

<para>
这条指令同样可以使用正则表达式。这时，<value>domain</value>应以“<literal>~</literal>”标志开始，且可以使用命名匹配组和位置匹配组，而<value>replacement</value>可以引用这些匹配组：
<example>
proxy_cookie_domain ~\.(?P&lt;sl_domain&gt;[-0-9a-z]+\.[a-z]+)$ $sl_domain;
</example>
</para>

<para>
可以同时定义多条<literal>proxy_cookie_domain</literal>指令：
<example>
proxy_cookie_domain localhost example.org;
proxy_cookie_domain ~\.([a-z]+\.[a-z]+)$ $1;
</example>
</para>

<para>
<literal>off</literal>参数可以取消当前配置级别的所有<literal>proxy_cookie_domain</literal>指令：
<example>
proxy_cookie_domain off;
proxy_cookie_domain localhost example.org;
proxy_cookie_domain www.example.org example.org;
</example>
</para>

</directive>


<directive name="proxy_cookie_path">
<syntax><literal>off</literal></syntax>
<syntax><value>path</value> <value>replacement</value></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.15</appeared-in>

<para>
设置<header>Set-Cookie</header>响应头中的<literal>path</literal>属性的替换文本。
假设后端服务器返回的<header>Set-Cookie</header>响应头含有属性“<literal>path=/two/some/uri/</literal>”，那么指令
<example>
proxy_cookie_path /two/ /;
</example>
将这个属性改写为“<literal>path=/some/uri/</literal>”。
</para>

<para>
<value>path</value>和<value>replacement</value>配置字符串可以包含变量：
<example>
proxy_cookie_path $uri /some$uri;
</example>
</para>

<para>
这条指令同样可以使用正则表达式。如果使用大小写敏感的匹配，<value>path</value>应以“<literal>~</literal>”标志开始，如果使用大小写不敏感的匹配，<value>path</value>应以“<literal>~*</literal>”标志开始。<value>path</value>可以使用命名匹配组和位置匹配组，<value>replacement</value>可以引用这些匹配组：
<example>
proxy_cookie_path ~*^/user/([^/]+) /u/$1;
</example>
</para>

<para>
可以同时定义多条<literal>proxy_cookie_path</literal>指令：
<example>
proxy_cookie_path /one/ /;
proxy_cookie_path / /two/;
</example>
</para>

<para>
<literal>off</literal>参数可以取消当前配置级别的所有<literal>proxy_cookie_path</literal>指令：
<example>
proxy_cookie_path off;
proxy_cookie_path /two/ /;
proxy_cookie_path ~*^/user/([^/]+) /u/$1;
</example>
</para>

</directive>


<directive name="proxy_hide_header">
<syntax><value>field</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
nginx默认不会将<header>Date</header>、<header>Server</header>、<header>X-Pad</header>，和<header>X-Accel-...</header>响应头发送给客户端。<literal>proxy_hide_header</literal>指令则可以设置额外的响应头，这些响应头也不会发送给客户端。相反的，如果希望允许传递某些响应头给客户端，可以使用<link id="proxy_pass_header"/>指令。
</para>

</directive>


<directive name="proxy_http_version">
<syntax><literal>1.0</literal> | <literal>1.1</literal></syntax>
<default>1.0</default>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.4</appeared-in>

<para>
设置代理使用的HTTP协议版本。默认使用的版本是1.0，而1.1版本则推荐在使用<link doc="ngx_http_upstream_module.xml" id="keepalive"/>连接时一起使用。
</para>

</directive>


<directive name="proxy_ignore_client_abort">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
决定当客户端在响应传输完成前就关闭连接时，nginx是否应关闭后端连接。
</para>

</directive>


<directive name="proxy_ignore_headers">
<syntax><value>field</value> ...</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
不处理后端服务器返回的指定响应头。下面的响应头可以被设置：
<header>X-Accel-Redirect</header>，<header>X-Accel-Expires</header>，<header>X-Accel-Limit-Rate</header> (1.1.6)，<header>X-Accel-Buffering</header> (1.1.6)，
<header>X-Accel-Charset</header> (1.1.6)，<header>Expires</header>，<header>Cache-Control</header>，和<header>Set-Cookie</header> (0.8.44)。
</para>

<para>
如果不被取消，这些头部的处理可能产生下面结果：
<list type="bullet" compact="no">

<listitem>
<header>X-Accel-Expires</header>，<header>Expires</header>，<header>Cache-Control</header>，和<header>Set-Cookie</header>
设置响应<link id="proxy_cache_valid">缓存</link>的参数；
</listitem>

<listitem>
<header>X-Accel-Redirect</header>执行到指定URI的<link doc="ngx_http_core_module.xml" id="internal">内部跳转</link>；
</listitem>

<listitem>
<header>X-Accel-Limit-Rate</header>设置响应到客户端的传输<link doc="ngx_http_core_module.xml" id="limit_rate">速率限制</link>；
</listitem>

<listitem>
<header>X-Accel-Buffering</header>启动或者关闭响应<link id="proxy_buffering">缓冲</link>；
</listitem>

<listitem>
<header>X-Accel-Charset</header>设置响应所需的<link doc="ngx_http_charset_module.xml" id="charset">字符集</link>。
</listitem>

</list>
</para>

</directive>


<directive name="proxy_intercept_errors">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
当后端服务器的响应状态码大于等于400时，决定是否直接将响应发送给客户端，亦或将响应转发给nginx由<link doc="ngx_http_core_module.xml" id="error_page"/>指令来处理。
</para>

</directive>


<directive name="proxy_max_temp_file_size">
<syntax><value>size</value></syntax>
<default>1024m</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
打开响应<link id="proxy_buffering">缓冲</link>以后，如果整个响应不能存放在<link id="proxy_buffer_size"/>和<link id="proxy_buffers"/>指令设置的缓冲区内，部分响应可以存放在临时文件中。
这条指令可以设置临时文件的最大<value>容量</value>。而每次写入临时文件的数据量则由<link id="proxy_temp_file_write_size"/>指令定义。
</para>

<para>
将此值设置为0将禁止响应写入临时文件。
</para>

</directive>


<directive name="proxy_next_upstream">
<syntax>
    <literal>error</literal> |
    <literal>timeout</literal> |
    <literal>invalid_header</literal> |
    <literal>http_500</literal> |
    <literal>http_502</literal> |
    <literal>http_503</literal> |
    <literal>http_504</literal> |
    <literal>http_404</literal> |
    <literal>off</literal>
    ...</syntax>
<default>error timeout</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
指定在何种情况下一个失败的请求应该被发送到下一台后端服务器：
<list type="tag">

<tag-name><literal>error</literal></tag-name>
<tag-desc>和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现错误；</tag-desc>

<tag-name><literal>timeout</literal></tag-name>
<tag-desc>和后端服务器建立连接时，或者向后端服务器发送请求时，或者从后端服务器接收响应头时，出现超时；</tag-desc>

<tag-name><literal>invalid_header</literal></tag-name>
<tag-desc>后端服务器返回空响应或者非法响应头；</tag-desc>

<tag-name><literal>http_500</literal></tag-name>
<tag-desc>后端服务器返回的响应状态码为500；</tag-desc>

<tag-name><literal>http_502</literal></tag-name>
<tag-desc>后端服务器返回的响应状态码为502；</tag-desc>

<tag-name><literal>http_503</literal></tag-name>
<tag-desc>后端服务器返回的响应状态码为503；</tag-desc>

<tag-name><literal>http_504</literal></tag-name>
<tag-desc>后端服务器返回的响应状态码为504；</tag-desc>

<tag-name><literal>http_404</literal></tag-name>
<tag-desc>后端服务器返回的响应状态码为404；</tag-desc>

<tag-name><literal>off</literal></tag-name>
<tag-desc>停止将请求发送给下一台后端服务器。</tag-desc>

</list>
</para>

<para>
需要理解一点的是，只有在没有向客户端发送任何数据以前，将请求转给下一台后端服务器才是可行的。也就是说，如果在传输响应到客户端时出现错误或者超时，这类错误是不可能恢复的。
</para>

</directive>


<directive name="proxy_no_cache">
<syntax><value>string</value> ...</syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
定义nginx不将响应写入缓存的条件。如果至少一个字符串条件非空而且非“0”，nginx就不将响应存入缓存：
<example>
proxy_no_cache $cookie_nocache $arg_nocache$arg_comment;
proxy_no_cache $http_pragma    $http_authorization;
</example>
这条指令可以和<link id="proxy_cache_bypass"/>指令一起使用。
</para>

</directive>


<directive name="proxy_pass">
<syntax><value>URL</value></syntax>
<default/>
<context>location</context>
<context>if in location</context>
<context>limit_except</context>

<para>
设置后端服务器的协议和地址，还可以设置可选的URI以定义本地路径和后端服务器的映射关系。
这条指令可以设置的协议是“<literal>http</literal>”或者“<literal>https</literal>”，而地址既可以使用域名或者IP地址加端口（可选）的形式来定义：
<example>
proxy_pass http://localhost:8000/uri/;
</example>
又可以使用UNIX域套接字路径来定义。该路径接在“<literal>unix</literal>”字符串后面，两端由冒号所包围，比如：
<example>
proxy_pass http://unix:/tmp/backend.socket:/uri/;
</example>
</para>

<para>
如果解析一个域名得到多个地址，所有的地址都会以轮转的方式被使用。当然，也可以使用<link doc="ngx_http_upstream_module.xml">服务器组</link>来定义地址。
</para>

<para>
请求URI按下面规则传送给后端服务器：
<list type="bullet" compact="no">

<listitem>
如果<literal>proxy_pass</literal>使用了URI，当传送请求到后端服务器时，<link doc="ngx_http_core_module.xml" id="location">规范化</link>以后的请求路径与配置中的路径的匹配部分将被替换为指令中定义的URI：
<example>
location /name/ {
    proxy_pass http://127.0.0.1/remote/;
}
</example>
</listitem>

<listitem>
如果<literal>proxy_pass</literal>没有使用URI，传送到后端服务器的请求URI一般客户端发起的原始URI，如果nginx改变了请求URI，则传送的URI是nginx改变以后完整的规范化URI：
<example>
location /some/path/ {
    proxy_pass http://127.0.0.1;
}
</example>
<note>
在1.1.12版以前，如果<literal>proxy_pass</literal>没有使用URI，某些情况下，nginx改变URI以后，会错误地将原始URI而不是改变以后的URI发送到后端服务器。
</note>
</listitem>
</list>
</para>

<para>
某些情况下，无法确定请求URI中应该被替换的部分：
<list type="bullet" compact="no">

<listitem>
使用正则表达式定义路径。
<para>
这种情况下，指令不应该使用URI。
</para>
</listitem>

<listitem>
在需要代理的路径中，使用<link doc="ngx_http_rewrite_module.xml" id="rewrite"/>指令改变了URI，但仍使用相同配置处理请求(<literal>break</literal>)：
<example>
location /name/ {
    rewrite    /name/([^/]+) /users?name=$1 break;
    proxy_pass http://127.0.0.1;
}
</example>
<para>
这种情况下，本指令设置的URI会被忽略，改变后的URI将被发送给后端服务器。
</para>
</listitem>
</list>
</para>

<para>
后端服务器的地址，端口和URI中都可以使用变量：
<example>
proxy_pass http://$host$uri;
</example>
甚至像这样：
<example>
proxy_pass $request;
</example>
</para>

<para>
这种情况下，后端服务器的地址将会在定义的<link doc="ngx_http_upstream_module.xml">服务器组</link>中查找。如果查找不到，nginx使用<link doc="ngx_http_core_module.xml" id="resolver"/>来查找该地址。
</para>

</directive>


<directive name="proxy_pass_header">
<syntax><value>field</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
允许传送<link id="proxy_hide_header">被屏蔽</link>的后端服务器响应头到客户端。
</para>

</directive>


<directive name="proxy_read_timeout">
<syntax><value>time</value></syntax>
<default>60s</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
定义从后端服务器读取响应的超时。此超时是指相邻两次读操作之间的最长时间间隔，而不是整个响应传输完成的最长时间。如果后端服务器在超时时间段内没有传输任何数据，连接将被关闭。
</para>

</directive>


<directive name="proxy_redirect">
<syntax><literal>default</literal></syntax>
<syntax><literal>off</literal></syntax>
<syntax><value>redirect</value> <value>replacement</value></syntax>
<default>default</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
设置后端服务器<header>Location</header>响应头和<header>Refresh</header>响应头的替换文本。
假设后端服务器返回的响应头是
“<literal>Location: http://localhost:8000/two/some/uri/</literal>”，那么指令
<example>
proxy_redirect http://localhost:8000/two/ http://frontend/one/;
</example>
将把字符串改写为
“<literal>Location: http://frontend/one/some/uri/</literal>”。
</para>

<para>
<value>replacement</value>字符串可以省略服务器名：
<example>
proxy_redirect http://localhost:8000/two/ /;
</example>
此时将使用代理服务器的主域名和端口号来替换。如果端口是80，可以不加。
</para>

<para>
用<literal>default</literal>参数指定的默认替换使用了<link doc="ngx_http_core_module.xml" id="location"/>和<link id="proxy_pass"/>指令的参数。因此，下面两例配置等价：
<example>
location /one/ {
    proxy_pass     http://upstream:port/two/;
    proxy_redirect default;
</example>

<example>
location /one/ {
    proxy_pass     http://upstream:port/two/;
    proxy_redirect http://upstream:port/two/ /one/;
</example>
而且因为同样的原因，<link id="proxy_pass"/>指令使用变量时，不允许本指令使用<literal>default</literal>参数。
</para>

<para>
<value>replacement</value>字符串可以包含变量：
<example>
proxy_redirect http://localhost:8000/ http://$host:$server_port/;
</example>
</para>

<para>
而<value>redirect</value>字符串从1.1.11版本开始也可以包含变量：
<example>
proxy_redirect http://$proxy_host:8000/ /;
</example>
</para>

<para>
同时，从1.1.11版本开始，指令支持正则表达式。使用正则表达式的话，如果是大小写敏感的匹配，<value>redirect</value>以“<literal>~</literal>”作为开始，如果是大小写不敏感的匹配，<value>redirect</value>以“<literal>~*</literal>”作为开始。而且<value>redirect</value>的正则表达式中可以包含命名匹配组和位置匹配组，而在<value>replacement</value>中可以引用这些匹配组的值：
<example>
proxy_redirect ~^(http://[^:]+):\d+(/.+)$ $1$2;
proxy_redirect ~*/user/([^/]+)/(.+)$      http://$1.example.com/$2;
</example>
</para>

<para>
除此以外，可以同时定义多个<literal>proxy_redirect</literal>指令：
<example>
proxy_redirect default;
proxy_redirect http://localhost:8000/  /;
proxy_redirect http://www.example.com/ /;
</example>
</para>

<para>
另外，<literal>off</literal>参数可以使所有相同配置级别的<literal>proxy_redirect</literal>指令无效：
<example>
proxy_redirect off;
proxy_redirect default;
proxy_redirect http://localhost:8000/  /;
proxy_redirect http://www.example.com/ /;
</example>
</para>

<para>
最后，使用这条指令也可以为地址为相对地址的重定向添加域名：
<example>
proxy_redirect / /;
</example>
</para>

</directive>


<directive name="proxy_send_timeout">
<syntax><value>time</value></syntax>
<default>60s</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
定义向后端服务器传输请求的超时。此超时是指相邻两次写操作之间的最长时间间隔，而不是整个请求传输完成的最长时间。如果后端服务器在超时时间段内没有接收到任何数据，连接将被关闭。
</para>

</directive>


<directive name="proxy_set_header">
<syntax><value>field</value> <value>value</value></syntax>
<default>Host $proxy_host</default>
<default>Connection close</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
允许重新定义或者添加发往后端服务器的请求头。<value>value</value>可以包含文本、变量或者它们的组合。
当且仅当当前配置级别中没有定义<literal>proxy_set_header</literal>指令时，会从上面的级别继承配置。
默认情况下，只有两个请求头会被重新定义：
<example>
proxy_set_header Host       $proxy_host;
proxy_set_header Connection close;
</example>
</para>

<para>
如果不想改变请求头<header>Host</header>的值，可以这样来设置：
<example>
proxy_set_header Host       $http_host;
</example>
</para>

<para>
但是，如果客户端请求头中没有携带这个头部，那么传递到后端服务器的请求也不含这个头部。
这种情况下，更好的方式是使用<var>$host</var>变量——它的值在请求包含<header>Host</header>请求头时为<header>Host</header>字段的值，在请求未携带<header>Host</header>请求头时为虚拟主机的主域名：
<example>
proxy_set_header Host       $host;
</example>
</para>

<para>
此外，服务器名可以和后端服务器的端口一起传送：
<example>
proxy_set_header Host       $host:$proxy_port;
</example>
</para>

<para>
如果某个请求头的值为空，那么这个请求头将不会传送给后端服务器：
<example>
proxy_set_header Accept-Encoding "";
</example>
</para>

</directive>


<directive name="proxy_ssl_session_reuse">
<syntax><literal>on</literal> | <literal>off</literal></syntax>
<default>on</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
决定是否重用与后端服务器的SSL会话。如果日志中出现“<literal>SSL3_GET_FINISHED:digest check failed</literal>”错误，请尝试关闭会话重用。
</para>

</directive>


<directive name="proxy_store">
<syntax>
    <literal>on</literal> |
    <literal>off</literal> |
    <value>string</value></syntax>
<default>off</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
开启将文件保存到磁盘上的功能。如果设置为<literal>on</literal>，nginx将文件保存在<link doc="ngx_http_core_module.xml" id="alias"/>指令或<link doc="ngx_http_core_module.xml" id="root"/>指令设置的路径中。如果设置为<literal>off</literal>，nginx将关闭文件保存的功能。此外，保存的文件名也可以使用含变量的<value>string</value>参数来指定：
<example>
proxy_store /data/www$original_uri;
</example>
</para>

<para>
保存文件的修改时间根据接收到的<header>Last-Modified</header>响应头来设置。响应都是先写到临时文件，然后进行重命名来生成的。从0.8.9版本开始，临时文件和持久化存储可以放在不同的文件系统，但是需要注意这时文件执行的是在两个文件系统间拷贝操作，而不是廉价的重命名操作。因此建议保存文件的路径和<link id="proxy_temp_path"/>指令设置的临时文件的路径在同一个文件系统中。
</para>

<para>
这条指令可以用于创建静态无更改文件的本地拷贝，比如：
<example>
location /images/ {
    root                   /data/www;
    open_file_cache_errors off;
    error_page             404 = /fetch$uri;
}

location /fetch/ {
    internal;

    proxy_pass             http://backend/;
    proxy_store            on;
    proxy_store_access     user:rw group:rw all:r;
    proxy_temp_path        /data/temp;

    alias                  /data/www/;
}
</example>
</para>

<para>
或者像这样：
<example>
location /images/ {
    root               /data/www;
    error_page         404 = @fetch;
}

location @fetch {
    internal;

    proxy_pass         http://backend;
    proxy_store        on;
    proxy_store_access user:rw group:rw all:r;
    proxy_temp_path    /data/temp;

    root               /data/www;
}
</example>
</para>

</directive>


<directive name="proxy_store_access">
<syntax><value>users</value>:<value>permissions</value> ...</syntax>
<default>user:rw</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
设置新创建的文件和目录的访问权限，比如：
<example>
proxy_store_access user:rw group:rw all:r;
</example>
</para>

<para>
如果指定了任何<literal>group</literal>或者<literal>all</literal>的访问权限，那么可以略去<literal>user</literal>的访问权限：
<example>
proxy_store_access group:rw all:r;
</example>
</para>

</directive>


<directive name="proxy_temp_file_write_size">
<syntax><value>size</value></syntax>
<default>8k|16k</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
Limits the <value>size</value> of data written to a temporary file
at a time, when buffering of responses from the proxied server
to temporary files is enabled.
By default, <value>size</value> is limited by two buffers set by the
<link id="proxy_buffer_size"/> and <link id="proxy_buffers"/> directives.
The maximum size of a temporary file is set by the
<link id="proxy_max_temp_file_size"/> directive.
</para>

</directive>


<directive name="proxy_temp_path">
<syntax>
    <value>path</value>
    [<value>level1</value>
    [<value>level2</value>
    [<value>level3</value>]]]</syntax>
<default>proxy_temp</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
定义从后端服务器接收的临时文件的存放路径，可以为临时文件路径定义至多三层子目录的目录树。
比如，下面配置
<example>
proxy_temp_path /spool/nginx/proxy_temp 1 2;
</example>
那么临时文件的路径看起来会是这样：
<example>
/spool/nginx/proxy_temp/<emphasis>7</emphasis>/<emphasis>45</emphasis>/00000123<emphasis>457</emphasis>
</example>
</para>

</directive>

</section>


<section id="variables" name="内嵌变量">

<para>
<literal>ngx_http_proxy_module</literal>支持内嵌变量，可以用于在<link id="proxy_set_header"/>指令中构造请求头：
<list type="tag">

<tag-name><var>$proxy_host</var></tag-name>
<tag-desc>后端服务器的主机名和端口；</tag-desc>

<tag-name><var>$proxy_port</var></tag-name>
<tag-desc>后端服务器的端口；</tag-desc>

<tag-name><var>$proxy_add_x_forwarded_for</var></tag-name>
<tag-desc>将<var>$remote_addr</var>变量值添加在客户端<header>X-Forwarded-For</header>请求头的后面，并以逗号分隔。
如果客户端请求未携带<header>X-Forwarded-For</header>请求头，<var>$proxy_add_x_forwarded_for</var>变量值将与<var>$remote_addr</var>变量相同。</tag-desc>
</list>
</para>

</section>

</module>
