<?xml version="1.0"?>

<!--
  Copyright (C) Igor Sysoev
  Copyright (C) Nginx, Inc.
  -->

<!DOCTYPE module SYSTEM "../../../../dtd/module.dtd">

<module name="Module ngx_http_xslt_module"
        link="/cn/docs/http/ngx_http_xslt_module.html"
        lang="cn"
        translator="allisstone"  
        rev="1">

<section id="summary">

<para>
<literal>ngx_http_xslt_module</literal> (0.7.8+) 是一个filter模块，它使用一个或多个XSLT样式表来转换XML响应。
</para>

<para>
此模块不是默认编译的，因此需要指定
<literal>--with-http_xslt_module</literal>
编译选项。
<note>
此模块需要
<link url="http://xmlsoft.org">libxml2</link> 和
<link url="http://xmlsoft.org/XSLT/">libxslt</link> 库。
</note>
</para>

</section>


<section id="example" name="Example Configuration">

<para>
<example>
location / {
    xml_entities    /site/dtd/entities.dtd;
    xslt_stylesheet /site/xslt/one.xslt param=value;
    xslt_stylesheet /site/xslt/two.xslt;
}
</example>
</para>

</section>


<section id="directives" name="Directives">

<directive name="xml_entities">
<syntax><value>path</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
指定DTD文件声明字符实体。
此文件在配置阶段编译。
由于技术原因，模块不能使用处理的XML中声明的外部子集，因而它忽略这些子集并使用专门的文件来定义。
这个文件仅能描述需要的字符实体，而不应该使用它来描述XML结构，比如：

<example>
&lt;!ENTITY nbsp "&amp;#xa0;"&gt;
</example>
</para>

</directive>


<directive name="xslt_param">
<syntax><value>parameter</value> <value>value</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.18</appeared-in>

<para>
定义一个XSLT样式表参数。
<value>value</value> 值被视为一个XPath表达式。
<value>value</value> 值可以包含变量。
可以使用指令<link id="xslt_string_param"/> 来传递一个字符串值给样式表。
</para>

<para>
可以有多个 <literal>xslt_param</literal> 指令。
当且仅当在当前块级别中没有定义
<literal>xslt_param</literal> 和 <link id="xslt_string_param"/>
指令时，才能继承上层级别的设置。
</para>

</directive>


<directive name="xslt_string_param">
<syntax><value>parameter</value> <value>value</value></syntax>
<default/>
<context>http</context>
<context>server</context>
<context>location</context>
<appeared-in>1.1.18</appeared-in>

<para>
为XSLT样式表定义一个字符串参数。
nginx不解析 <value>value</value> 中包含的XPath表达式。
 <value>value</value> 值可以包含变量。
</para>

<para>
可以有多个<literal>xslt_string_param</literal> 指令。
当且仅当在当前块级别中没有定义
<link id="xslt_param"/> 和 <literal>xslt_string_param</literal>
指令时，才能继承上层级别的设置。
</para>

</directive>


<directive name="xslt_stylesheet">
<syntax>
    <value>stylesheet</value>
    [<value>parameter</value>=<value>value</value> ...]</syntax>
<default/>
<context>location</context>

<para>
定义一个XSLT样式表和它的可选参数。
样式表在配置阶段编译。
</para>

<para>
参数既可以单独指定，也可以写在一行，并使用分隔符
 “<literal>:</literal>” 来分隔。
如果一个参数包含了“<literal>:</literal>” 字符，
它应该被转义为 “<literal>%3A</literal>”。
并且<command>libxslt</command> 
需要将非字母数字的参数包括在单引号或双引号中。例如：
<example>
param1='http%3A//www.example.com':param2=value2
</example>
</para>

<para>
可以使用变量来描述参数，例如，可以用一个变量来指定整行参数。
<example>
location / {
    xslt_stylesheet /site/xslt/one.xslt
                    $arg_xslt_params
                    param1='$value1':param2=value2
                    param3=value3;
}
</example>
</para>

<para>
可以指定多个样式表；在这种情况下，它们将按配置中指定的顺序来生效。
</para>

</directive>


<directive name="xslt_types">
<syntax><value>mime-type</value> ...</syntax>
<default>text/xml</default>
<context>http</context>
<context>server</context>
<context>location</context>

<para>
除了“<literal>text/xml</literal>”类型，启用指定的MIME类型的转换响应。
特殊值“<literal>*</literal>”匹配任何MIME类型(0.8.29)。
如果转换的结果是HTML响应，它的MIME类型就变为“<literal>text/html</literal>”
</para>

</directive>

</section>

</module>
